---
title: Tour de Lakewood Distance Calculator
layout: base.njk
---

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/6.5.0/turf.min.js"></script>

<style>
    /* Only keep essential styles that Tailwind can't handle */
    #map {
        height: 500px;
    }
    
    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #E25A28;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .file-input-container.dragover {
        border-color: #E25A28 !important;
        background-color: #fef7f0 !important;
    }
</style>

<section id="tour-de-lakewood-calculator" class="min-h-[calc(100vh-48px)] py-24 bg-light flex flex-col items-center justify-center px-8 space-y-8">
    <div class="text-center max-w-4xl">
        <h1 class="text-4xl md:text-6xl font-bold text-primary font-sans mb-4">üö¥‚Äç‚ôÇÔ∏è Tour de Lakewood</h1>
        <p class="text-lg text-dark/70 mb-8">Compare your Strava routes within Lakewood, OH</p>
    </div>

    <div class="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-8 space-y-6">
        <div id="boundaryStatus" class="bg-teal/10 border border-teal/30 rounded-lg p-4 text-center text-sm text-teal">
            Loading Lakewood city boundary...
        </div>
        
        <div id="fileInputContainer" class="border-4 border-dashed border-primary/40 rounded-xl p-12 text-center transition-all duration-300 cursor-pointer hover:border-primary hover:bg-primary/5">
            <div class="text-lg text-primary font-medium mb-2">üìÅ Click to upload GPX files or drag & drop</div>
            <div class="text-dark/60 text-sm">Select multiple GPX files to compare coverage</div>
            <input type="file" id="fileInput" accept=".gpx" multiple class="hidden">
        </div>
        
        <div id="fileList" class="space-y-3"></div>
        
        <button id="analyzeBtn" disabled class="w-full bg-primary hover:bg-primary/90 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-medium py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-[1.02] disabled:hover:scale-100">
            Analyze Coverage
        </button>
    </div>

    <div id="resultsSection" class="hidden w-full max-w-4xl bg-white rounded-2xl shadow-xl p-8">
        <h2 class="text-2xl font-bold text-dark mb-6">Coverage Analysis Results</h2>
        <div id="results"></div>
    </div>

    <div class="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6">
        <h2 class="text-2xl font-bold text-dark mb-6">Map Visualization</h2>
        <div id="map" class="rounded-lg overflow-hidden border border-gray-200"></div>
    </div>
</section>

<script>
    // Real Lakewood, OH boundary traced by hand from geojson.io
    let lakewoodBoundary = {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [[
                [-81.83597631779621, 41.49021077332216],
                [-81.83071453872475, 41.48541904971606],
                [-81.8300513295541, 41.482104377326266],
                [-81.8288257396952, 41.478600117117054],
                [-81.82415663410464, 41.476566693405715],
                [-81.82390429317377, 41.47343991106692],
                [-81.82414291707748, 41.472098370976084],
                [-81.82003675449354, 41.47199139416543],
                [-81.81626831114386, 41.471136418267236],
                [-81.81151942422079, 41.46990790452463],
                [-81.80873527079781, 41.46996803379113],
                [-81.80071097547606, 41.47003137720134],
                [-81.78975042389374, 41.46955315110972],
                [-81.78565388674065, 41.46813818024481],
                [-81.78434329972946, 41.469363988657705],
                [-81.78442430223926, 41.47065129614569],
                [-81.78090307291981, 41.47034361117372],
                [-81.7688519522787, 41.47567301086812],
                [-81.76869579525604, 41.4916859762092],
                [-81.78255935449454, 41.495865015224666],
                [-81.79617861799005, 41.49801622442834],
                [-81.81258865105828, 41.495557208008535],
                [-81.82768183218826, 41.492976278656386],
                [-81.83605842699963, 41.49027223902905],
                [-81.83597631779621, 41.49021077332216] // Close the polygon
            ]]
        },
        "properties": {
            "name": "Lakewood, OH (Hand-traced Real Boundary)"
        }
    };

    let map;
    let files = [];
    let analysisResults = [];

    // Initialize map
    async function initMap() {
        const statusEl = document.getElementById('boundaryStatus');
        statusEl.innerHTML = "‚úÖ Using hand-traced Lakewood city boundary";
        statusEl.className = "bg-teal/10 border border-teal/30 rounded-lg p-4 text-center text-sm text-teal";
        
        map = L.map('map').setView([41.4856, -81.8017], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(map);

        // Add Lakewood boundary
        L.geoJSON(lakewoodBoundary, {
            style: {
                color: '#E25A28',
                weight: 3,
                fillColor: '#E25A28',
                fillOpacity: 0.1
            }
        }).addTo(map).bindPopup(lakewoodBoundary.properties.name);
    }

    // File input handlers
    document.getElementById('fileInputContainer').addEventListener('click', () => {
        document.getElementById('fileInput').click();
    });

    document.getElementById('fileInput').addEventListener('change', handleFileSelect);

    // Drag and drop handlers
    document.getElementById('fileInputContainer').addEventListener('dragover', (e) => {
        e.preventDefault();
        e.currentTarget.classList.add('dragover');
    });

    document.getElementById('fileInputContainer').addEventListener('dragleave', (e) => {
        e.currentTarget.classList.remove('dragover');
    });

    document.getElementById('fileInputContainer').addEventListener('drop', (e) => {
        e.preventDefault();
        e.currentTarget.classList.remove('dragover');
        handleFileSelect({ target: { files: e.dataTransfer.files } });
    });

    function handleFileSelect(event) {
        const selectedFiles = Array.from(event.target.files);
        files = [...files, ...selectedFiles];
        updateFileList();
        document.getElementById('analyzeBtn').disabled = files.length === 0;
    }

    function updateFileList() {
        const fileList = document.getElementById('fileList');
        fileList.innerHTML = '';
        
        files.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'flex items-center justify-between p-4 bg-accent/20 rounded-lg border-l-4 border-primary';
            fileItem.innerHTML = `
                <div class="font-medium text-dark">${file.name}</div>
                <button onclick="removeFile(${index})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors">
                    Remove
                </button>
            `;
            fileList.appendChild(fileItem);
        });
    }

    function removeFile(index) {
        files.splice(index, 1);
        updateFileList();
        document.getElementById('analyzeBtn').disabled = files.length === 0;
    }

    // GPX parsing function
    function parseGPX(gpxText) {
        const parser = new DOMParser();
        const gpxDoc = parser.parseFromString(gpxText, 'text/xml');
        const coordinates = [];

        // Extract track points
        const trkpts = gpxDoc.querySelectorAll('trkpt');
        trkpts.forEach(trkpt => {
            const lat = parseFloat(trkpt.getAttribute('lat'));
            const lon = parseFloat(trkpt.getAttribute('lon'));
            coordinates.push([lon, lat]);
        });

        // Extract waypoints if no track points
        if (coordinates.length === 0) {
            const wpts = gpxDoc.querySelectorAll('wpt');
            wpts.forEach(wpt => {
                const lat = parseFloat(wpt.getAttribute('lat'));
                const lon = parseFloat(wpt.getAttribute('lon'));
                coordinates.push([lon, lat]);
            });
        }

        return coordinates;
    }

    // Analysis function
    async function analyzeFiles() {
        const resultsSection = document.getElementById('resultsSection');
        const results = document.getElementById('results');
        
        resultsSection.style.display = 'block';
        results.innerHTML = '<div class="text-center py-8"><div class="spinner"></div><div class="text-primary">Analyzing GPX files...</div></div>';

        analysisResults = [];
        const colors = ['#E25A28', '#1C8282', '#363636', '#c8c6af', '#ff6b6b', '#4ecdc4'];

        try {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const gpxText = await file.text();
                const coordinates = parseGPX(gpxText);

                if (coordinates.length === 0) {
                    throw new Error(`No coordinates found in ${file.name}`);
                }

                // Filter coordinates within Lakewood boundary
                const coordinatesInLakewood = coordinates.filter(coord => {
                    const point = turf.point(coord);
                    return turf.booleanPointInPolygon(point, lakewoodBoundary);
                });

                // Calculate metrics
                let distance = 0;
                let coverageArea = 0;
                
                if (coordinatesInLakewood.length > 1) {
                    const lineString = turf.lineString(coordinatesInLakewood);
                    distance = turf.length(lineString, { units: 'miles' });
                    
                    // Calculate coverage area using buffer
                    const buffered = turf.buffer(lineString, 0.01, { units: 'miles' });
                    const intersection = turf.intersect(buffered, lakewoodBoundary);
                    if (intersection) {
                        coverageArea = turf.area(intersection) / 2589988.11; // Convert to square miles
                    }
                }

                const result = {
                    name: file.name,
                    coordinates: coordinatesInLakewood,
                    totalPoints: coordinates.length,
                    pointsInLakewood: coordinatesInLakewood.length,
                    distance: distance,
                    coverageArea: coverageArea,
                    color: colors[i % colors.length]
                };

                analysisResults.push(result);

                // Add to map
                if (coordinatesInLakewood.length > 1) {
                    L.polyline(coordinatesInLakewood.map(c => [c[1], c[0]]), {
                        color: result.color,
                        weight: 3,
                        opacity: 0.7
                    }).addTo(map);
                }
            }

            displayResults();
        } catch (error) {
            results.innerHTML = `<div class="bg-red-100 border border-red-300 text-red-700 p-4 rounded-lg">Error: ${error.message}</div>`;
        }
    }

    function displayResults() {
        const results = document.getElementById('results');
        
        // Sort by distance (or coverage area) to find winner
        const sortedResults = [...analysisResults].sort((a, b) => b.distance - a.distance);
        const winner = sortedResults[0];

        let html = '';
        
        if (winner) {
            html += `<div class="bg-green-100 border border-green-300 text-green-800 p-6 rounded-lg text-center text-lg font-medium mb-6">
                üèÜ Winner: ${winner.name} with ${winner.distance.toFixed(2)} miles of coverage in Lakewood!
            </div>`;
        }

        analysisResults.forEach(result => {
            html += `
                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg mb-4 border-l-4" style="border-left-color: ${result.color};">
                    <div class="font-medium text-dark" style="color: ${result.color};">${result.name}</div>
                    <div class="flex gap-6 text-sm text-dark/70">
                        <div class="text-center">
                            <div class="font-bold text-lg text-primary">${result.distance.toFixed(2)}</div>
                            <div>Miles in Lakewood</div>
                        </div>
                        <div class="text-center">
                            <div class="font-bold text-lg text-teal">${result.coverageArea.toFixed(4)}</div>
                            <div>Sq Miles Coverage</div>
                        </div>
                        <div class="text-center">
                            <div class="font-bold text-lg text-dark">${result.pointsInLakewood}</div>
                            <div>GPS Points in City</div>
                        </div>
                        <div class="text-center">
                            <div class="font-bold text-lg text-accent">${((result.pointsInLakewood / result.totalPoints) * 100).toFixed(1)}%</div>
                            <div>% in Lakewood</div>
                        </div>
                    </div>
                </div>
            `;
        });

        results.innerHTML = html;
    }

    // Initialize
    document.getElementById('analyzeBtn').addEventListener('click', analyzeFiles);
    
    // Initialize map when page loads
    document.addEventListener('DOMContentLoaded', initMap);
</script>
